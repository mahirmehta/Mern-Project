{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n    } = _ref;\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }); // 3. Start composing the theme object\n\n    const theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(parsedScheme).forEach(schemeKey => {\n          if (parsedScheme[schemeKey] && typeof parsedScheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], parsedScheme[schemeKey]);\n          } else {\n            theme[schemeKey] = parsedScheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/MERN FRONT/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","shouldSkipGeneratingVar","designSystemShouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","css","rootCss","vars","rootVars","parsedTheme","prefix","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n    const {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n        return defaultMode;\n      }\n      return mode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(parsedScheme).forEach(schemeKey => {\n          if (parsedScheme[schemeKey] && typeof parsedScheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], parsedScheme[schemeKey]);\n          } else {\n            theme[schemeKey] = parsedScheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}